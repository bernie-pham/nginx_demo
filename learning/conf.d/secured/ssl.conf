# OCSP
# 
ssl_ocsp on;
## ssl_ocsp with `leaf` option enable client certificate only
ssl_ocsp_responder http://ocsp.digicert.com;
## only http scheme is supported for ocsp responder
ssl_verify_client optional_no_ca;
## by enable ssl_verify_client, the contents of the certificate is accessiable through the $ssl_client_cert
## this directive enables verification of client certificates

# ------------------------------------------------------------------------------------
# Server Certificate
ssl_certificate file;
# specify for public key
# data:$<variable> could be used instead of file.
ssl_certificate_key file;
# specify for private key
# data:$<variable> and engine:name:id could be used instead of file.

# ------------------------------------------------------------------------------------
ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];
ssl_ciphers HIGH:!aNULL:!MD5;
## ssl_protocols & ssl_ciphers are used to require that clients only use the strong version and ciphers of SSL/TLS when establishing connections
## use `openssl ciphers`to get full list of ciphers

# ------------------------------------------------------------------------------------
## SSL operation consume extra CPU resorces. To optimize this, there are two ways to minimize the number of these operation per client.
## Enabling keepalive connections to send several requests via one connection
keepalive_timeout 70;
## Reusing SSL session parameters to avoid SSL handshakes for parallel and subsequent connections
ssl_session_cache   shared:SSL:20m;
## as a ref, a 1MB shared cache can hold approx 4k sessions
ssl_session_timeout 4h;
## by default, nginx retains cached session for 5 mins, using ssl_session_timeout to increase retaining time of the sesison cache.
## for 4h timeout, 20M cache is appropriate.

# ------------------------------------------------------------------------------------
# an alternative to the session cache is using sesison tickets
ssl_session_tickets on;
ssl_session_ticket_key file;

# ------------------------------------------------------------------------------------
# Speeding up secure TCP connections
## the default timeout for ssl handshake is 60s, and it can be redefined by using:
ssl_handshake_timeout 10;

# ------------------------------------------------------------------------------------
# To redirect all HTTP traffic to HTTPs
## define this on http {} context
## with the following block, all http traffic with be caught and redirect to https traffic
server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}


# ------------------------------------------------------------------------------------
# Rate limitting: limit the bandwidth to clients
## specify rate in bytes per second, zero to disable rate limiting
limit_rate 0;
## for special usecase, specify limit_rate_after to set response rate after number of transmission data
limit_rate_after 500k;

# ------------------------------------------------------------------------------------
# connection limiting: limiti the number of concurrent connection
## limit connection directive can be used http, server, location context
limit_conn_zone $binary_remote_addr zone=limit_per_con:10m;
## only allow 2 concurrent connections can be made
limit_conn limit_per_con 2;
## to set the status for excessive connections
limit_conn_status 503;

# ------------------------------------------------------------------------------------
# limit the request per connection
limit_req_zone $binary_remote_addr zone=limit_per_req:10 rate=10r/s;
limit_req zone=limit_per_req burst=5 nodelay;

# ------------------------------------------------------------------------------------
# to optimize number of idle connection to upstream servers, use keepalives to minize 
keepalive 10;


# ------------------------------------------------------------------------------------
# To strict access based on ip, using allow and deny directives, these directives could be used in http, server, location and limit_except context
server {
    allow address | CIDR | unix: | all;
    deny address | CIDR | unix: | all;
};

# ------------------------------------------------------------------------------------
# To strict access based on method, using limit_except {} directive, this can be used on location
limit_except method ... { ... };


# ------------------------------------------------------------------------------------
# Authenticate with auth_basic and auth_request
## auth_basic can be used on http, server and location and limit_except
auth_basic "API";
auth_basic_user_file file;


# ------------------------------------------------------------------------------------
# How to customize the format of logs files
## using log_format in http context to customize the format
log_format compression escape=default `$binary_remote_addr`;
# Error log
error_log /var/log/nginx/error.log warn;
access_log logs/access.log compression;